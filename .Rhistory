"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_10_s1_R1_bismark_bt2_pe.dedup.sorted.bam") #Put all .bam files into a list for analysis.
processedFilesCov1 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 1, treatment = treatmentSpecification) #Process files for CpG meetehylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
analysisFiles <- list("../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_1_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_2_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_3_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_4_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_5_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_6_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_7_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_8_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_9_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_10_dedup.sorted.bam") #Put all .bam files into a list for analysis.
processedFilesCov1 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 1, treatment = treatmentSpecification) #Process files for CpG meetehylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov3 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 3, treatment = treatmentSpecification) #Process files for CpG meetehylation using 3x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov5 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 5, treatment = treatmentSpecification) #Process files for CpG meetehylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
nFiles <- length(sample.IDs) #Count number of samples
fileName <- data.frame("nameBase" = rep("2018-10-11-Percent-CpG-Methylation", times = nFiles),
"nameBase2" = rep("2018-10-11-Percent-CpG-Coverage", times = nFiles),
"sample.ID" = 1:10) #Create new dataframe for filenames
head(fileName) #Confirm dataframe creation
fileName$actualFileName <- paste(fileName$nameBase, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName2 <- paste(fileName$nameBase2, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG coverage plot
fileName$actualFileName3 <- paste(fileName$nameBase, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName4 <- paste(fileName$nameBase2, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG coverage plot
head(fileName) #Confirm column creation
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName[i], height = 1000, width = 1000) #Save file with designated name
getMethylationStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get %CpG methylation information
dev.off() #Turn off plotting device
} #Plot and save %CpG methylation information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName2[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName3[i], height = 1000, width = 1000) #Save file with designated name
getMethylationStats(processedFilesCov3[[i]], plot = TRUE, both.strands = FALSE) #Get %CpG methylation information
dev.off() #Turn off plotting device
} #Plot and save %CpG methylation information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName4[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov3[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
methylationInformationCov1 <- unite(processedFilesCov1) #Combine all processed files into a single table
methylationInformationCov1 <- unite(processedFilesCov3) #Combine all processed files into a single table
knitr::opts_chunk$set(echo = TRUE)
library(devtools) #Load devtools
biocLite("methylKit") #Install methylkit
source("https://bioconductor.org/biocLite.R") #Source package from bioconductor
biocLite("methylKit") #Install methylkit
biocLite("methylKit") #Install methylkit
install_github("al2na/methylKit", build_vignettes = FALSE, repos=BiocInstaller::biocinstallRepos(), dependencies = TRUE) #Install more methylKit options
library(methylKit) #Load methylkit
analysisFiles <- list("2018-10-14-Steven-Samples/zr2096_1_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_2_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_3_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_4_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_5_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_6_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_7_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_8_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_9_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_10_dedup.sorted.bam") #Put all .bam files into a list for analysis.
sample.IDs <- list("1", "2", "3", "4", "5", "6", "7", "8", "9", "10") #Create list of sample IDs
treatmentSpecification <- c(rep(0, times = 5), rep(1, times = 5)) #Specify which treatment the samples were from. 1 is the treatment (high pCO2) and 0 is the control (ambient pCO2)
processedFilesCov1 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 1, treatment = treatmentSpecification) #Process files for CpG methylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov3 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 3, treatment = treatmentSpecification) #Process files for CpG methylation using 3x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov5 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 5, treatment = treatmentSpecification) #Process files for CpG methylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
nFiles <- length(sample.IDs) #Count number of samples
fileName <- data.frame("nameBase" = rep("2018-10-11-Percent-CpG-Methylation", times = nFiles),
"nameBase2" = rep("2018-10-11-Percent-CpG-Coverage", times = nFiles),
"sample.ID" = 1:10) #Create new dataframe for filenames
head(fileName) #Confirm dataframe creation
fileName$actualFileName <- paste(fileName$nameBase, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName2 <- paste(fileName$nameBase2, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG coverage plot
fileName$actualFileName3 <- paste(fileName$nameBase, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName4 <- paste(fileName$nameBase2, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG coverage plot
fileName$actualFileName5 <- paste(fileName$nameBase, "-5xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 5x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName6 <- paste(fileName$nameBase2, "-5xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 5x coverage + specific sample's percent CpG coverage plot
head(fileName) #Confirm column creation
methylationInformationCov1 <- unite(processedFilesCov1) #Combine all processed files into a single table
clusteringInformationCov1 <- clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
#jpeg(filename = "2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-PCA-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1) #Run a PCA analysis on percent methylation for all samples
#dev.off() #Turn off plotting device
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-Screeplot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
#dev.off()
methylationInformationCov3 <- unite(processedFilesCov3) #Combine all processed files into a single table
clusteringInformationCov3 <- clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
#jpeg(filename = "2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov3, plot = TRUE) #Understand correlation between methylation patterns in different samples
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
#dev.off() #Turn off plotting device
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-Screeplot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
#dev.off()
methylationInformationCov5 <- unite(processedFilesCov5) #Combine all processed files into a single table
clusteringInformationCov5 <- clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
#jpeg(filename = "2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov5, plot = TRUE) #Understand correlation between methylation patterns in different samples
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov5, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-PCA-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5) #Run a PCA analysis on percent methylation for all samples
#dev.off() #Turn off plotting device
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-Screeplot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
#dev.off()
differentialMethylationStatsCov1 <- calculateDiffMeth(methylationInformationCov1) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-Screeplot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov3, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-Screeplot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov5, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov5, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-Screeplot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
differentialMethylationStatsCov1 <- calculateDiffMeth(methylationInformationCov1) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
load("~/Documents/project-virginica-oa/.RData")
knitr::opts_chunk$set(echo = TRUE)
differentialMethylationStatsCov1 <- calculateDiffMeth(methylationInformationCov1) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
View(methylationInformationCov1)
diffMethStats50Cov1 <- getMethylDiff(differentialMethylationStatsCov1, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov1) #Confirm creation
write.csv(diffMethStats50Cov1, "2018-10-11-Steven-Samples-Differentially-Methylated-Loci-50-Cov1.csv") #Save table as .csv
differentialMethylationStatsCov3 <- calculateDiffMeth(methylationInformationCov3) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Cov3 <- getMethylDiff(differentialMethylationStatsCov3, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov3) #Confirm creation
write.csv(diffMethStats50Cov3, "2018-10-11-Steven-Samples-Differentially-Methylated-Loci-50-Cov3.csv") #Save table as .csv
differentialMethylationStatsCov5 <- calculateDiffMeth(methylationInformationCov5) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Cov5 <- getMethylDiff(differentialMethylationStatsCov5, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov5) #Confirm creation
write.csv(diffMethStats50Cov5, "2018-10-11--Steven-Samples-Differentially-Methylated-Loci-50-Cov5.csv") #Save table as .csv
par(mfrow = c(2, 5)) #Reset par. Create a 2 row x 5 column grid, and fill in panels by rows.
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName[i], height = 1000, width = 1000) #Save file with designated name
getMethylationStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get %CpG methylation information
dev.off() #Turn off plotting device
} #Plot and save %CpG methylation information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName2[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
for(i in 1:nFiles) { #For each data file
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
}
coverageStats <- getCoverageStats(processedFilesCov1[[i]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
plot(coverageStats)
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE)
for(i in 1:nFiles) { #For each data file
coverageStats[i] <- getCoverageStats(processedFilesCov1[[i]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
plot(coverageStats[i])
}
par() #Reset par. Create a 2 row x 5 column grid, and fill in panels by rows.
getCoverageStats(processedFilesCov1[[1]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
getCoverageStats(processedFilesCov1[[2]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
getCoverageStats(processedFilesCov1[[1]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
?getCoverageStats
coverageStats1 <- getCoverageStats(processedFilesCov1[[1]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
hist(coverageStats1)
coverageStats1 <- getCoverageStats(processedFilesCov1[[1]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
par(mfrow = c(5, 2))
getCoverageStats(processedFilesCov1[[1]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
getCoverageStats(processedFilesCov1[[1]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
par(mfrow = c(5, 2), oma = c(10, 10, 10, 10))
getCoverageStats(processedFilesCov1[[1]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
knitr::opts_chunk$set(echo = TRUE)
sessionInfo()
install.packages("devtools") #Install the devtools package
analysisFiles <- list("/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_1_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_2_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_3_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_4_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_5_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_6_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_7_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_8_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_9_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_10_dedup.sorted.bam") #Put all .bam files into a list for analysis. File paths are sourced from locally-mounted gannet server.
sample.IDs <- list("1", "2", "3", "4", "5", "6", "7", "8", "9", "10") #Create list of sample IDs
treatmentSpecification <- c(rep(0, times = 5), rep(1, times = 5)) #Specify which treatment the samples were from. 1 is the treatment (high pCO2) and 0 is the control (ambient pCO2)
processedFilesCov1 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 1, treatment = treatmentSpecification) #Process files for CpG methylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
install.packages("devtools") #Install the devtools package
library(devtools) #Load devtools
source("https://bioconductor.org/biocLite.R") #Source package from bioconductor
biocLite("methylKit") #Install methylkit
install_github("al2na/methylKit", build_vignettes = FALSE, repos=BiocInstaller::biocinstallRepos(), dependencies = TRUE) #Install more methylKit options
library(methylKit) #Load methylkit
install.packages("devtools") #Install the devtools package
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
library(devtools) #Load devtools
source("https://bioconductor.org/biocLite.R") #Source package from bioconductor
source("https://bioconductor.org/biocLite.R") #Source package from bioconductor
biocLite("methylKit") #Install methylkit
biocLite("methylKit") #Install methylkit
install_github("al2na/methylKit", build_vignettes = FALSE, repos=BiocInstaller::biocinstallRepos(), dependencies = TRUE) #Install more methylKit options
install_github("al2na/methylKit", build_vignettes = FALSE, repos=BiocInstaller::biocinstallRepos(), dependencies = TRUE) #Install more methylKit options
library(methylKit) #Load methylkit
sessionInfo()
processedFilesCov1 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 1, treatment = treatmentSpecification) #Process files for CpG methylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov3 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 3, treatment = treatmentSpecification) #Process files for CpG methylation using 3x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov5 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 5, treatment = treatmentSpecification) #Process files for CpG methylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
nFiles <- length(sample.IDs) #Count number of samples
fileName <- data.frame("nameBase" = rep("2018-10-18-Genefish-Samples/2018-10-18-Percent-CpG-Methylation", times = nFiles),
"nameBase2" = rep("2018-10-18-Genefish-Samples/2018-10-18-Percent-CpG-Coverage", times = nFiles),
"sample.ID" = 1:10) #Create new dataframe for filenames
head(fileName) #Confirm dataframe creation
fileName$actualFileName <- paste(fileName$nameBase, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName2 <- paste(fileName$nameBase2, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG coverage plot
fileName$actualFileName3 <- paste(fileName$nameBase, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName4 <- paste(fileName$nameBase2, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG coverage plot
fileName$actualFileName5 <- paste(fileName$nameBase, "-5xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 5x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName6 <- paste(fileName$nameBase2, "-5xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 5x coverage + specific sample's percent CpG coverage plot
head(fileName) #Confirm column creation
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName[i], height = 1000, width = 1000) #Save file with designated name
getMethylationStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get %CpG methylation information
dev.off() #Turn off plotting device
} #Plot and save %CpG methylation information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName2[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName4[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov3[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName5[i], height = 1000, width = 1000) #Save file with designated name
getMethylationStats(processedFilesCov5[[i]], plot = TRUE, both.strands = FALSE) #Get %CpG methylation information
dev.off() #Turn off plotting device
} #Plot and save %CpG methylation information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName6[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov5[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
methylationInformationCov1 <- unite(processedFilesCov1) #Combine all processed files into a single table
clusteringInformationCov1 <- clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1) #Run a PCA analysis on percent methylation for all samples
PCASamples(methylationInformationCov1) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
PCASamples(methylationInformationCov1, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
methylationInformationCov3 <- unite(processedFilesCov3) #Combine all processed files into a single table
methylationInformationCov3 <- unite(processedFilesCov3) #Combine all processed files into a single table
clusteringInformationCov3 <- clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov3, plot = TRUE) #Understand correlation between methylation patterns in different samples
getCorrelation(methylationInformationCov3, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
PCASamples(methylationInformationCov3, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
methylationInformationCov5 <- unite(processedFilesCov5) #Combine all processed files into a single table
methylationInformationCov5 <- unite(processedFilesCov5) #Combine all processed files into a single table
clusteringInformationCov5 <- clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov5, plot = TRUE) #Understand correlation between methylation patterns in different samples
getCorrelation(methylationInformationCov5, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov5, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
clusterSamples(methylationInformationCov5, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5) #Run a PCA analysis on percent methylation for all samples
PCASamples(methylationInformationCov5) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
PCASamples(methylationInformationCov5, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov3, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Genefish-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov5, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov5, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
differentialMethylationStatsCov1 <- calculateDiffMeth(methylationInformationCov1) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Cov1 <- getMethylDiff(differentialMethylationStatsCov1, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov1) #Confirm creation
write.csv(diffMethStats50Cov1, "2018-10-18-Genefish-Samples/2018-10-18-Genefish-Samples-Differentially-Methylated-Loci-50-Cov1.csv") #Save table as .csv
differentialMethylationStatsCov3 <- calculateDiffMeth(methylationInformationCov3) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Cov3 <- getMethylDiff(differentialMethylationStatsCov3, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov3) #Confirm creation
write.csv(diffMethStats50Cov3, "2018-10-18-Genefish-Samples/2018-10-18-Genefish-Samples-Differentially-Methylated-Loci-50-Cov3.csv") #Save table as .csv
differentialMethylationStatsCov5 <- calculateDiffMeth(methylationInformationCov5) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Cov5 <- getMethylDiff(differentialMethylationStatsCov5, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov5) #Confirm creation
write.csv(diffMethStats50Cov5, "2018-10-18-Genefish-Samples/2018-10-18-Steven-Samples-Differentially-Methylated-Loci-50-Cov5.csv") #Save table as .csv
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
load("~/Documents/project-virginica-oa/.RData")
knitr::opts_chunk$set(echo = TRUE)
tiles100 <- tileMethylCounts(processedFilesCov3, win.size = 100, step.size = 100) #Add up C and T counts from each covered cytosine and return total C and T count for each tile. Perform this analysis with 100 bp sized windows, and slide 100 bp for each new window
head(tiles100) #Confirm object creation
head(tiles100[[10]]) #Confirm object creation.
head(tiles100) #Show tiles100 head for all samples processed.
methylationInformationTiles100 <- unite(tiles100) #Combine all processed files into a single table
clusteringInformationTiles100 <- clusterSamples(methylationInformationTiles100, dist = "correlation", method = "ward", plot = FALSE) #Save clustering information as a new object
getCorrelation(methylationInformationTiles100, plot = TRUE) #Understand correlation between methylation patterns in different samples
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-CpG-Methylation-Clustering-Tiles100.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
clusterSamples(methylationInformationTiles100, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-CpG-Methylation-Clustering-Tiles100.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationTiles100, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
PCASamples(methylationInformationTiles100) #Run a PCA analysis on percent methylation for all samples
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-Methylation-PCA-Tiles100.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationTiles100) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
PCASamples(methylationInformationTiles100, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-Methylation-Screeplot-Tiles100.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationTiles100, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
getCorrelation(methylationInformationTiles100, plot = TRUE) #Understand correlation between methylation patterns in different samples
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-Pearson-Correlation-Plot-Tiles100.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationTiles100, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
tiles1000 <- tileMethylCounts(processedFilesCov3, win.size = 1000, step.size = 1000) #Add up C and T counts from each covered cytosine and return total C and T count for each tile. Perform this analysis with 1000 bp sized windows, and slide 1000 bp for each new window
head(tiles1000[[10]]) #Confirm object creation. [[10]] only shows tile100 head for the 10th sample processed.
methylationInformationTiles1000 <- unite(tiles1000) #Combine all processed files into a single table
clusteringInformationTiles1000 <- clusterSamples(methylationInformationTiles1000, dist = "correlation", method = "ward", plot = FALSE) #Save clustering information as a new object
getCorrelation(methylationInformationTiles1000, plot = TRUE) #Understand correlation between methylation patterns in different samples
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-Pearson-Correlation-Plot-Tiles1000.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationTiles1000, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
clusterSamples(methylationInformationTiles1000, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-CpG-Methylation-Clustering-Tiles1000.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationTiles1000, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
PCASamples(methylationInformationTiles1000) #Run a PCA analysis on percent methylation for all samples
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-Methylation-PCA-Tiles1000.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationTiles1000) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
PCASamples(methylationInformationTiles1000, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-Methylation-Screeplot-Tiles1000.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationTiles1000, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-Methylation-Screeplot-Tiles1000.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationTiles1000, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
differentialMethylationStatsTiles100 <- calculateDiffMeth(methylationInformationTiles100) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Tiles100 <- getMethylDiff(differentialMethylationStatsTiles100, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Tiles100) #Confirm creation
write.csv(diffMethStats50Tiles100, "2018-10-19-Tiling-Analysis/2018-10-19-Genefish-Samples-Differentially-Methylated-Loci-50-Cov3-Tiles100.csv") #Save table as .csv
differentialMethylationStatsTiles1000 <- calculateDiffMeth(methylationInformationTiles1000) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Tiles1000 <- getMethylDiff(differentialMethylationStatsTiles1000, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Tiles1000) #Confirm creation
write.csv(diffMethStats50Tiles1000, "2018-10-19-Tiling-Analysis/2018-10-19-Genefish-Samples-Differentially-Methylated-Loci-50-Cov3-Tiles1000.csv") #Save table as .csv
tiles1000step100 <- tileMethylCounts(processedFilesCov3, win.size = 1000, step.size = 1000) #Add up C and T counts from each covered cytosine and return total C and T count for each tile. Perform this analysis with 1000 bp sized windows, and slide 100 bp for each new window
head(tiles1000step100[[10]]) #Confirm object creation. [[10]] only shows tile100 head for the 10th sample processed.
methylationInformationTiles1000Step100 <- unite(tiles1000step100) #Combine all processed files into a single table
clusteringInformationTiles1000Step100 <- clusterSamples(methylationInformationTiles1000Step100, dist = "correlation", method = "ward", plot = FALSE) #Save clustering information as a new object
getCorrelation(methylationInformationTiles1000Step100, plot = TRUE) #Understand correlation between methylation patterns in different samples
```{r}
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-Pearson-Correlation-Plot-Tiles1000-Step100.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationTiles1000Step100, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
clusterSamples(methylationInformationTiles1000Step100, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-CpG-Methylation-Clustering-Tiles1000-Step100.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationTiles1000Step100, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
PCASamples(methylationInformationTiles1000Step100) #Run a PCA analysis on percent methylation for all samples
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-Methylation-PCA-Tiles1000-Step100.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationTiles1000Step100) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
PCASamples(methylationInformationTiles1000Step100, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
jpeg(filename = "2018-10-19-Tiling-Analysis/2018-10-19-Full-Sample-Methylation-Screeplot-Tiles1000-Step100.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationTiles1000Step100, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
differentialMethylationStatsTiles1000Step100 <- calculateDiffMeth(methylationInformationTiles1000Step100) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Tiles1000Step100 <- getMethylDiff(differentialMethylationStatsTiles1000Step100, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Tiles1000Step100) #Confirm creation
write.csv(diffMethStats50Tiles1000Step100, "2018-10-19-Tiling-Analysis/2018-10-19-Genefish-Samples-Differentially-Methylated-Loci-50-Cov3-Tiles1000-Step100.csv") #Save table as .csv
library(readr) #Load package
install.packages("tidyverse") #Install tidyverse
library(tidyverse) #Load package
DMLPlus10222018 <- filter(diffMethStats50Cov3, strand == "+") %>% mutate(start = start -1, end = end + 1) %>% select(chr, start, end, strand, meth.diff) #Save + strand of DMLs as a new object
DMLMinus10222018 <- filter(diffMethStats50Cov3, strand == "-") %>% mutate(start = start -2) %>% select(chr, start, end, strand, meth.diff) #Save - strand of DMLs as a new object
DML05302018 <- bind_rows(DMLPlus05302018, DMLMinus05302018) %>% arrange(chr, start) %>% mutate_if(is.numeric, as.integer) #Join + and - strand information to be saved as a BED file, and avoid writing information in scientific notation
DMLPlus10222018 <- filter(diffMethStats50Cov3, strand == "+") %>% mutate(start = start -1, end = end + 1) %>% select(chr, start, end, strand, meth.diff) #Save + strand of DMLs as a new object
DMLMinus10222018 <- filter(diffMethStats50Cov3, strand == "-") %>% mutate(start = start -2) %>% select(chr, start, end, strand, meth.diff) #Save - strand of DMLs as a new object
DML05302018 <- bind_rows(DMLPlus05302018, DMLMinus05302018) %>% arrange(chr, start) %>% mutate_if(is.numeric, as.integer) #Join + and - strand information to be saved as a BED file, and avoid writing information in scientific notation
DML10222018 <- bind_rows(DMLPlus10222018, DMLMinus10222018) %>% arrange(chr, start) %>% mutate_if(is.numeric, as.integer) #Join + and - strand information to be saved as a BED file, and avoid writing information in scientific notation
write_delim(DML10222018, "2018-10-22-DML-Locations.bed",  delim = '\t', col_names = FALSE) #Save data as a BED file
DMRPlus10222018 <- filter(diffMethStats50Tiles100, strand == "+") %>% mutate(start = start -1, end = end + 1) %>% select(chr, start, end, strand, meth.diff) #Save + strand of DMLs as a new object
DMRMinus10222018 <- filter(diffMethStats50Tiles100, strand == "-") %>% mutate(start = start -2) %>% select(chr, start, end, strand, meth.diff) #Save - strand of DMLs as a new object
DMR10222018 <- bind_rows(DMRPlus10222018, DMRMinus10222018) %>% arrange(chr, start) %>% mutate_if(is.numeric, as.integer) #Join + and - strand information to be saved as a BED file, and avoid writing information in scientific notation
write_delim(DMR10222018, "2018-10-22-DMR-Locations.bed",  delim = '\t', col_names = FALSE) #Save data as a BED file
knitr::opts_chunk$set(echo = TRUE)
