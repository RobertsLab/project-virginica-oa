head(DMLmRNA) #Confirm import
colnames(DMLmRNA) <- c("DMLchromosome", "DMLstart", "DMLend", "DMLstrand", "mRNAchromosome", "type", "mRNAstart", "mRNAend", "V11", "mRNAstrand", "ID", "Parent", "Dbxref=GeneID", "V17", "Genbank", "Name")
head(DMLmRNA) #Confirm column naming
DMLmRNA <- read.delim("2018-09-11-DML-mRNA-unfolded.txt", header = FALSE) #Import DML-mRNA overlaps
head(DMLmRNA) #Confirm import
colnames(DMLmRNA) <- c("DMLchromosome", "DMLstart", "DMLend", "DMLstrand", "V5", "mRNAchromosome", "Gnomon", "mRNA", "mRNAstart", "mRNAend", "V11", "mRNAstrand", "V13", "ID", "Parent", "Dbxref=GeneID", "V17", "Genbank", "Name")
head(DMLmRNA) #Confirm column naming
DMLmRNA <- DMLmRNA[-c(17),] #Delete "Genbank" column
head(DMLmRNA) #Confirm column deletion
DMLmRNA <- DMLmRNA[-17,] #Delete "Genbank" column
head(DMLmRNA) #Confirm column deletion
DMLmRNA <- read.delim("2018-09-11-DML-mRNA-unfolded.txt", header = FALSE) #Import DML-mRNA overlaps
head(DMLmRNA) #Confirm import
colnames(DMLmRNA) <- c("DMLchromosome", "DMLstart", "DMLend", "DMLstrand", "V5", "mRNAchromosome", "Gnomon", "mRNA", "mRNAstart", "mRNAend", "V11", "mRNAstrand", "V13", "ID", "Parent", "Dbxref=GeneID", "V17", "Genbank", "Name")
head(DMLmRNA) #Confirm column naming
DMLmRNA <- DMLmRNA[c(1:16, 18:20),] #Delete "Genbank" column
head(DMLmRNA) #Confirm column deletion
DMLmRNA <- read.delim("2018-09-11-DML-mRNA-unfolded.txt", header = FALSE) #Import DML-mRNA overlaps
colnames(DMLmRNA) <- c("DMLchromosome", "DMLstart", "DMLend", "DMLstrand", "V5", "mRNAchromosome", "Gnomon", "mRNA", "mRNAstart", "mRNAend", "V11", "mRNAstrand", "V13", "ID", "Parent", "Dbxref=GeneID", "V17", "Genbank", "Name")
head(DMLmRNA) #Confirm column naming
mRNADMLblast <- merge(x = DMLmRNA, y = blastResults, by = "Genbank") #Merge the two files by the Genbank ID column
View(mRNADMLblast)
DMLmRNA <- read.delim("2018-09-11-DML-mRNA-unfolded.txt", header = FALSE) #Import DML-mRNA overlaps
head(DMLmRNA) #Confirm import
colnames(DMLmRNA) <- c("DMLchromosome", "DMLstart", "DMLend", "DMLstrand", "V5", "mRNAchromosome", "Gnomon", "mRNA", "mRNAstart", "mRNAend", "V11", "mRNAstrand", "V13", "ID", "Parent", "Dbxref=GeneID", "V17", "Genbank", "Name", "V20", "V21", "V22", "V23", "V24", "V25", "V26", "V27", "V28", "V29") #Rename columns
head(DMLmRNA) #Confirm column naming
mRNADMLblast <- merge(x = DMLmRNA, y = blastResults, by = "Genbank") #Merge the two files by the Genbank ID column
head(mRNADMLblast) #Confirm merge
mRNADMLblast <- merge(x = blastResults, y = DMLmRNA, by = "Genbank") #Merge the two files by the Genbank ID column
head(mRNADMLblast) #Confirm merge
write.csv(mRNADMLblast, "2018-09-11-mRNA-DML-Uniprot.csv") #Write out file
head("2018-09-11-mRNA-DML-Uniprot-codeIsolated.csv")
head("2018-09-11-mRNA-DML-Uniprot-codeIsolated.csv")
knitr::opts_chunk$set(echo = TRUE)
blastResults <- read.delim("2018-09-06-Transcript-Uniprot-blastx.txt", header = FALSE, sep = "\t", dec = ".") #Import blast results
head(blastResults) #Confirm import
colnames(blastResults) <- c("Genbank", "Uniprot", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
head(blastResults) #Confirm column headers
DMLExon <- read.delim("2018-09-16-DML-Exon-mRNA-Overlaps.txt", header = FALSE) #Import DML-exon-mRNA overlaps
head(DMLExon) #Confirm import
colnames(DMLExon) <- c("DMLchromosome", "DMLstart", "DMLend", "DMLstrand", "methDiff", "exonChromosome", "exonStart", "exonEnd", "mRNAchromosome", "Gnomon", "mRNA", "mRNAstart", "mRNAend", "V14", "mRNAstrand", "V15", "V16", "V17", "V18", "ID", "Parent", "Dbxref=GeneID", "V22", "Genbank", "Name", "V24", "V25", "V26", "V27", "V28", "V29", "V30", "V31", "V32", "V33", "V34") #Rename columns
colnames(DMLExon) <- c("DMLchromosome", "DMLstart", "DMLend", "DMLstrand", "methDiff", "exonChromosome", "exonStart", "exonEnd", "mRNAchromosome", "Gnomon", "mRNA", "mRNAstart", "mRNAend", "V14", "mRNAstrand", "V15", "V16", "V17", "V18", "ID", "Parent", "Dbxref=GeneID", "V22", "Genbank", "Name", "V26", "V27", "V28", "V29", "V30", "V31", "V32", "V33", "V34") #Rename columns
head(DMLExon) #Confirm column naming
colnames(DMLExon) <- c("DMLchromosome", "DMLstart", "DMLend", "DMLstrand", "methDiff", "exonChromosome", "exonStart", "exonEnd", "mRNAchromosome", "Gnomon", "mRNA", "mRNAstart", "mRNAend", "V14", "mRNAstrand", "V15", "V16", "V17", "ID", "Parent", "Dbxref=GeneID", "V22", "Genbank", "Name", "V25", "V26", "V27", "V28", "V29", "V30", "V31", "V32", "V33", "V34") #Rename columns
head(DMLExon) #Confirm column naming
<- merge(x = blastResults, y = DMLExon, by = "Genbank") #Merge the two files by the Genbank ID column
exonDMLBlast <- merge(x = blastResults, y = DMLExon, by = "Genbank") #Merge the two files by the Genbank ID column
head(exonDMLBlast) #Confirm merge
write.csv(exonDMLBlast, "2018-09-16-mRNA-Exon-Uniprot.csv") #Write out file
DMLInton <- read.delim("2018-09-16-DML-Intron-mRNA-Overlaps.txt", header = FALSE) #Import DML-intron-mRNA overlaps
head(DMLInton) #Confirm import
colnames(DMLInton) <- c("DMLchromosome", "DMLstart", "DMLend", "DMLstrand", "methDiff", "intronChromosome", "intronStart", "intronEnd", "mRNAchromosome", "Gnomon", "mRNA", "mRNAstart", "mRNAend", "V14", "mRNAstrand", "V15", "V16", "V17", "ID", "Parent", "Dbxref=GeneID", "V22", "Genbank", "Name", "V25", "V26", "V27", "V28", "V29", "V30", "V31", "V32", "V33", "V34") #Rename columns
head(DMLInton) #Confirm column naming
intronDMLBlast <- merge(x = blastResults, y = DMLIntron, by = "Genbank") #Merge the two files by the Genbank ID column
DMLIntron <- read.delim("2018-09-16-DML-Intron-mRNA-Overlaps.txt", header = FALSE) #Import DML-intron-mRNA overlaps
head(DMLIntron) #Confirm import
colnames(DMLIntron) <- c("DMLchromosome", "DMLstart", "DMLend", "DMLstrand", "methDiff", "intronChromosome", "intronStart", "intronEnd", "mRNAchromosome", "Gnomon", "mRNA", "mRNAstart", "mRNAend", "V14", "mRNAstrand", "V15", "V16", "V17", "ID", "Parent", "Dbxref=GeneID", "V22", "Genbank", "Name", "V25", "V26", "V27", "V28", "V29", "V30", "V31", "V32", "V33", "V34") #Rename columns
head(DMLIntron) #Confirm column naming
head(DMLIntron) #Confirm import
colnames(DMLIntron) <- c("DMLchromosome", "DMLstart", "DMLend", "DMLstrand", "methDiff", "intronChromosome", "intronStart", "intronEnd", "mRNAchromosome", "Gnomon", "mRNA", "mRNAstart", "mRNAend", "V14", "mRNAstrand", "V15", "V16", "V17", "ID", "Parent", "Dbxref=GeneID", "V22", "Genbank", "Name", "V25", "V26", "V27", "V28", "V29", "V30", "V31", "V32", "V33", "V34") #Rename columns
head(DMLIntron) #Confirm column naming
intronDMLBlast <- merge(x = blastResults, y = DMLIntron, by = "Genbank") #Merge the two files by the Genbank ID column
head(intronDMLBlast) #Confirm merge
write.csv(intronDMLBlast, "2018-09-16-intron-DML-Uniprot.csv") #Write out file
write.csv(intronDMLBlast, "2018-09-16-intron-DML-Uniprot.csv") #Write out file
write.csv(intronDMLBlast, "2018-09-16-Intron-DML-Uniprot.csv") #Write out file
write.csv(intronDMLBlast, "2018-09-16-Intron-DML-Uniprot.csv") #Write out file
write.csv(exonDMLBlast, "2018-09-16-Exon-DML-Uniprot.csv") #Write out file
knitr::opts_chunk$set(echo = TRUE)
sessionInfo()
install.packages("devtools") #Install the devtools package
library(devtools) #Load devtools
source("https://bioconductor.org/biocLite.R") #Source package from bioconductor
biocLite("methylKit") #Install methylkit
install_github("al2na/methylKit", build_vignettes = FALSE, repos=BiocInstaller::biocinstallRepos(), dependencies = TRUE) #Install more methylKit options
library(methylKit) #Load methylkit
sessionInfo()
getwd()
analysisFiles <- list("../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_1_s1_R1_bismark_bt2_pe.deduplicated.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_2_s1_R1_bismark_bt2_pe.deduplicated.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_3_s1_R1_bismark_bt2_pe.deduplicated.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_4_s1_R1_bismark_bt2_pe.deduplicated.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_5_s1_R1_bismark_bt2_pe.deduplicated.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_6_s1_R1_bismark_bt2_pe.deduplicated.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_7_s1_R1_bismark_bt2_pe.deduplicated.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_8_s1_R1_bismark_bt2_pe.deduplicated.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_9_s1_R1_bismark_bt2_pe.deduplicated.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_10_s1_R1_bismark_bt2_pe.deduplicated.sorted.bam") #Put all .bam files into a list for analysis. I can save this object in R Projects so I don't have to keep downloading large files and doing this memory intensive step.
sample.IDs <- list("1", "2", "3", "4", "5", "6", "7", "8", "9", "10") #Create list of sample IDs
treatmentSpecification <- c(rep(1, times = 5), rep(0, times = 5)) #Specify which treatment the samples were from. 1 is the treatment (high pCO2) and 0 is the control (ambient pCO2)
treatmentSpecification <- c(rep(0, times = 5), rep(1, times = 5)) #Specify which treatment the samples were from. 1 is the treatment (high pCO2) and 0 is the control (ambient pCO2)
processedFilesCov1 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 1, treatment = treatmentSpecification) #Process files for CpG meetehylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
analysisFiles <- list("../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_1_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_2_s1_R1_bismark_bt2_pe.dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_3_s1_R1_bismark_bt2_pe.dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_4_s1_R1_bismark_bt2_pe.dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_5_s1_R1_bismark_bt2_pe.dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_6_s1_R1_bismark_bt2_pe.dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_7_s1_R1_bismark_bt2_pe.dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_8_s1_R1_bismark_bt2_pe.dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_9_s1_R1_bismark_bt2_pe.dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_10_s1_R1_bismark_bt2_pe.dedup.sorted.bam") #Put all .bam files into a list for analysis.
processedFilesCov1 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 1, treatment = treatmentSpecification) #Process files for CpG meetehylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
analysisFiles <- list("../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_1_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_2_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_3_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_4_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_5_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_6_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_7_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_8_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_9_dedup.sorted.bam",
"../2018-10-03-Bismark-Parameter-Testing/2018-10-03-L012-Output/zr2096_10_dedup.sorted.bam") #Put all .bam files into a list for analysis.
processedFilesCov1 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 1, treatment = treatmentSpecification) #Process files for CpG meetehylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov3 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 3, treatment = treatmentSpecification) #Process files for CpG meetehylation using 3x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov5 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 5, treatment = treatmentSpecification) #Process files for CpG meetehylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
nFiles <- length(sample.IDs) #Count number of samples
fileName <- data.frame("nameBase" = rep("2018-10-11-Percent-CpG-Methylation", times = nFiles),
"nameBase2" = rep("2018-10-11-Percent-CpG-Coverage", times = nFiles),
"sample.ID" = 1:10) #Create new dataframe for filenames
head(fileName) #Confirm dataframe creation
fileName$actualFileName <- paste(fileName$nameBase, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName2 <- paste(fileName$nameBase2, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG coverage plot
fileName$actualFileName3 <- paste(fileName$nameBase, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName4 <- paste(fileName$nameBase2, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG coverage plot
head(fileName) #Confirm column creation
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName[i], height = 1000, width = 1000) #Save file with designated name
getMethylationStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get %CpG methylation information
dev.off() #Turn off plotting device
} #Plot and save %CpG methylation information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName2[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName3[i], height = 1000, width = 1000) #Save file with designated name
getMethylationStats(processedFilesCov3[[i]], plot = TRUE, both.strands = FALSE) #Get %CpG methylation information
dev.off() #Turn off plotting device
} #Plot and save %CpG methylation information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName4[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov3[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
methylationInformationCov1 <- unite(processedFilesCov1) #Combine all processed files into a single table
methylationInformationCov1 <- unite(processedFilesCov3) #Combine all processed files into a single table
knitr::opts_chunk$set(echo = TRUE)
library(devtools) #Load devtools
biocLite("methylKit") #Install methylkit
source("https://bioconductor.org/biocLite.R") #Source package from bioconductor
biocLite("methylKit") #Install methylkit
biocLite("methylKit") #Install methylkit
install_github("al2na/methylKit", build_vignettes = FALSE, repos=BiocInstaller::biocinstallRepos(), dependencies = TRUE) #Install more methylKit options
library(methylKit) #Load methylkit
analysisFiles <- list("2018-10-14-Steven-Samples/zr2096_1_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_2_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_3_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_4_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_5_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_6_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_7_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_8_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_9_dedup.sorted.bam",
"2018-10-14-Steven-Samples/zr2096_10_dedup.sorted.bam") #Put all .bam files into a list for analysis.
sample.IDs <- list("1", "2", "3", "4", "5", "6", "7", "8", "9", "10") #Create list of sample IDs
treatmentSpecification <- c(rep(0, times = 5), rep(1, times = 5)) #Specify which treatment the samples were from. 1 is the treatment (high pCO2) and 0 is the control (ambient pCO2)
processedFilesCov1 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 1, treatment = treatmentSpecification) #Process files for CpG methylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov3 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 3, treatment = treatmentSpecification) #Process files for CpG methylation using 3x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov5 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 5, treatment = treatmentSpecification) #Process files for CpG methylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
nFiles <- length(sample.IDs) #Count number of samples
fileName <- data.frame("nameBase" = rep("2018-10-11-Percent-CpG-Methylation", times = nFiles),
"nameBase2" = rep("2018-10-11-Percent-CpG-Coverage", times = nFiles),
"sample.ID" = 1:10) #Create new dataframe for filenames
head(fileName) #Confirm dataframe creation
fileName$actualFileName <- paste(fileName$nameBase, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName2 <- paste(fileName$nameBase2, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG coverage plot
fileName$actualFileName3 <- paste(fileName$nameBase, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName4 <- paste(fileName$nameBase2, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG coverage plot
fileName$actualFileName5 <- paste(fileName$nameBase, "-5xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 5x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName6 <- paste(fileName$nameBase2, "-5xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 5x coverage + specific sample's percent CpG coverage plot
head(fileName) #Confirm column creation
methylationInformationCov1 <- unite(processedFilesCov1) #Combine all processed files into a single table
clusteringInformationCov1 <- clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
#jpeg(filename = "2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-PCA-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1) #Run a PCA analysis on percent methylation for all samples
#dev.off() #Turn off plotting device
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-Screeplot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
#dev.off()
methylationInformationCov3 <- unite(processedFilesCov3) #Combine all processed files into a single table
clusteringInformationCov3 <- clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
#jpeg(filename = "2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov3, plot = TRUE) #Understand correlation between methylation patterns in different samples
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
#dev.off() #Turn off plotting device
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-Screeplot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
#dev.off()
methylationInformationCov5 <- unite(processedFilesCov5) #Combine all processed files into a single table
clusteringInformationCov5 <- clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
#jpeg(filename = "2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov5, plot = TRUE) #Understand correlation between methylation patterns in different samples
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov5, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
#dev.off()
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-PCA-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5) #Run a PCA analysis on percent methylation for all samples
#dev.off() #Turn off plotting device
#jpeg(filename = "2018-10-11-Full-Sample-Methylation-Screeplot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
#dev.off()
differentialMethylationStatsCov1 <- calculateDiffMeth(methylationInformationCov1) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-Screeplot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov3, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-Screeplot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Pearson-Correlation-Plot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov5, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-CpG-Methylation-Clustering-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov5, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-Screeplot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
differentialMethylationStatsCov1 <- calculateDiffMeth(methylationInformationCov1) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
load("~/Documents/project-virginica-oa/.RData")
knitr::opts_chunk$set(echo = TRUE)
differentialMethylationStatsCov1 <- calculateDiffMeth(methylationInformationCov1) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
View(methylationInformationCov1)
diffMethStats50Cov1 <- getMethylDiff(differentialMethylationStatsCov1, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov1) #Confirm creation
write.csv(diffMethStats50Cov1, "2018-10-11-Steven-Samples-Differentially-Methylated-Loci-50-Cov1.csv") #Save table as .csv
differentialMethylationStatsCov3 <- calculateDiffMeth(methylationInformationCov3) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Cov3 <- getMethylDiff(differentialMethylationStatsCov3, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov3) #Confirm creation
write.csv(diffMethStats50Cov3, "2018-10-11-Steven-Samples-Differentially-Methylated-Loci-50-Cov3.csv") #Save table as .csv
differentialMethylationStatsCov5 <- calculateDiffMeth(methylationInformationCov5) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Cov5 <- getMethylDiff(differentialMethylationStatsCov5, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov5) #Confirm creation
write.csv(diffMethStats50Cov5, "2018-10-11--Steven-Samples-Differentially-Methylated-Loci-50-Cov5.csv") #Save table as .csv
par(mfrow = c(2, 5)) #Reset par. Create a 2 row x 5 column grid, and fill in panels by rows.
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName[i], height = 1000, width = 1000) #Save file with designated name
getMethylationStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get %CpG methylation information
dev.off() #Turn off plotting device
} #Plot and save %CpG methylation information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName2[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
for(i in 1:nFiles) { #For each data file
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
}
coverageStats <- getCoverageStats(processedFilesCov1[[i]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
plot(coverageStats)
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE)
for(i in 1:nFiles) { #For each data file
coverageStats[i] <- getCoverageStats(processedFilesCov1[[i]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
plot(coverageStats[i])
}
par() #Reset par. Create a 2 row x 5 column grid, and fill in panels by rows.
getCoverageStats(processedFilesCov1[[1]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
getCoverageStats(processedFilesCov1[[2]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
getCoverageStats(processedFilesCov1[[1]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
?getCoverageStats
coverageStats1 <- getCoverageStats(processedFilesCov1[[1]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
hist(coverageStats1)
coverageStats1 <- getCoverageStats(processedFilesCov1[[1]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
par(mfrow = c(5, 2))
getCoverageStats(processedFilesCov1[[1]], plot = FALSE, both.strands = FALSE) #Plot CpG coverage information
getCoverageStats(processedFilesCov1[[1]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
par(mfrow = c(5, 2), oma = c(10, 10, 10, 10))
getCoverageStats(processedFilesCov1[[1]], plot = TRUE, both.strands = FALSE) #Plot CpG coverage information
knitr::opts_chunk$set(echo = TRUE)
sessionInfo()
install.packages("devtools") #Install the devtools package
analysisFiles <- list("/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_1_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_2_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_3_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_4_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_5_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_6_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_7_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_8_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_9_dedup.sorted.bam",
"/Volumes/web-1/spartina/2018-10-10-project-virginica-oa-Large-Files/2018-10-04-Bismark-Full-Samples-Revised-Parameters/zr2096_10_dedup.sorted.bam") #Put all .bam files into a list for analysis. File paths are sourced from locally-mounted gannet server.
sample.IDs <- list("1", "2", "3", "4", "5", "6", "7", "8", "9", "10") #Create list of sample IDs
treatmentSpecification <- c(rep(0, times = 5), rep(1, times = 5)) #Specify which treatment the samples were from. 1 is the treatment (high pCO2) and 0 is the control (ambient pCO2)
processedFilesCov1 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 1, treatment = treatmentSpecification) #Process files for CpG methylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
install.packages("devtools") #Install the devtools package
library(devtools) #Load devtools
source("https://bioconductor.org/biocLite.R") #Source package from bioconductor
biocLite("methylKit") #Install methylkit
install_github("al2na/methylKit", build_vignettes = FALSE, repos=BiocInstaller::biocinstallRepos(), dependencies = TRUE) #Install more methylKit options
library(methylKit) #Load methylkit
install.packages("devtools") #Install the devtools package
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
library(devtools) #Load devtools
source("https://bioconductor.org/biocLite.R") #Source package from bioconductor
source("https://bioconductor.org/biocLite.R") #Source package from bioconductor
biocLite("methylKit") #Install methylkit
biocLite("methylKit") #Install methylkit
install_github("al2na/methylKit", build_vignettes = FALSE, repos=BiocInstaller::biocinstallRepos(), dependencies = TRUE) #Install more methylKit options
install_github("al2na/methylKit", build_vignettes = FALSE, repos=BiocInstaller::biocinstallRepos(), dependencies = TRUE) #Install more methylKit options
library(methylKit) #Load methylkit
sessionInfo()
processedFilesCov1 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 1, treatment = treatmentSpecification) #Process files for CpG methylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov3 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 3, treatment = treatmentSpecification) #Process files for CpG methylation using 3x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
processedFilesCov5 <- processBismarkAln(location = analysisFiles, sample.id = sample.IDs, assembly = "v3", read.context = "CpG", mincov = 5, treatment = treatmentSpecification) #Process files for CpG methylation using 1x coverage. First 5 files were from ambient conditions, and the second from high pCO2 conditions.
nFiles <- length(sample.IDs) #Count number of samples
fileName <- data.frame("nameBase" = rep("2018-10-18-Genefish-Samples/2018-10-18-Percent-CpG-Methylation", times = nFiles),
"nameBase2" = rep("2018-10-18-Genefish-Samples/2018-10-18-Percent-CpG-Coverage", times = nFiles),
"sample.ID" = 1:10) #Create new dataframe for filenames
head(fileName) #Confirm dataframe creation
fileName$actualFileName <- paste(fileName$nameBase, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName2 <- paste(fileName$nameBase2, "-1xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 1x coverage + specific sample's percent CpG coverage plot
fileName$actualFileName3 <- paste(fileName$nameBase, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName4 <- paste(fileName$nameBase2, "-3xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 3x coverage + specific sample's percent CpG coverage plot
fileName$actualFileName5 <- paste(fileName$nameBase, "-5xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 5x coverage + specific sample's percent CpG methylation plot
fileName$actualFileName6 <- paste(fileName$nameBase2, "-5xCoverage", "-Sample", fileName$sample.ID, ".jpeg", sep = "") #Create a new column for the full filename for 5x coverage + specific sample's percent CpG coverage plot
head(fileName) #Confirm column creation
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName[i], height = 1000, width = 1000) #Save file with designated name
getMethylationStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get %CpG methylation information
dev.off() #Turn off plotting device
} #Plot and save %CpG methylation information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName2[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov1[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName4[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov3[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName5[i], height = 1000, width = 1000) #Save file with designated name
getMethylationStats(processedFilesCov5[[i]], plot = TRUE, both.strands = FALSE) #Get %CpG methylation information
dev.off() #Turn off plotting device
} #Plot and save %CpG methylation information
for(i in 1:nFiles) { #For each data file
jpeg(filename = fileName$actualFileName6[i], height = 1000, width = 1000) #Save file with designated name
getCoverageStats(processedFilesCov5[[i]], plot = TRUE, both.strands = FALSE) #Get CpG coverage information
dev.off() #Turn off plotting device
} #Plot and save CpG coverage information
methylationInformationCov1 <- unite(processedFilesCov1) #Combine all processed files into a single table
clusteringInformationCov1 <- clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1) #Run a PCA analysis on percent methylation for all samples
PCASamples(methylationInformationCov1) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
PCASamples(methylationInformationCov1, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
methylationInformationCov3 <- unite(processedFilesCov3) #Combine all processed files into a single table
methylationInformationCov3 <- unite(processedFilesCov3) #Combine all processed files into a single table
clusteringInformationCov3 <- clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov3, plot = TRUE) #Understand correlation between methylation patterns in different samples
getCorrelation(methylationInformationCov3, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
PCASamples(methylationInformationCov3, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
methylationInformationCov5 <- unite(processedFilesCov5) #Combine all processed files into a single table
methylationInformationCov5 <- unite(processedFilesCov5) #Combine all processed files into a single table
clusteringInformationCov5 <- clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = FALSE) #Save cluster information as a new object
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov5, plot = TRUE) #Understand correlation between methylation patterns in different samples
getCorrelation(methylationInformationCov5, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov5, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
clusterSamples(methylationInformationCov5, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5) #Run a PCA analysis on percent methylation for all samples
PCASamples(methylationInformationCov5) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
PCASamples(methylationInformationCov5, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov3, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov3, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
jpeg(filename = "2018-10-14-Steven-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Genefish-Samples/2018-10-11-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-14-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov3.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov3) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov5, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov5, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov5.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov5, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
differentialMethylationStatsCov1 <- calculateDiffMeth(methylationInformationCov1) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Cov1 <- getMethylDiff(differentialMethylationStatsCov1, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov1) #Confirm creation
write.csv(diffMethStats50Cov1, "2018-10-18-Genefish-Samples/2018-10-18-Genefish-Samples-Differentially-Methylated-Loci-50-Cov1.csv") #Save table as .csv
differentialMethylationStatsCov3 <- calculateDiffMeth(methylationInformationCov3) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Cov3 <- getMethylDiff(differentialMethylationStatsCov3, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov3) #Confirm creation
write.csv(diffMethStats50Cov3, "2018-10-18-Genefish-Samples/2018-10-18-Genefish-Samples-Differentially-Methylated-Loci-50-Cov3.csv") #Save table as .csv
differentialMethylationStatsCov5 <- calculateDiffMeth(methylationInformationCov5) #Calculate differential methylation statistics based on treatment indication from processBismarkAln
diffMethStats50Cov5 <- getMethylDiff(differentialMethylationStatsCov5, difference = 50, qvalue = 0.01) #Identify loci that are at least 50% different
head(diffMethStats50Cov5) #Confirm creation
write.csv(diffMethStats50Cov5, "2018-10-18-Genefish-Samples/2018-10-18-Steven-Samples-Differentially-Methylated-Loci-50-Cov5.csv") #Save table as .csv
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-CpG-Methylation-Clustering-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
clusterSamples(methylationInformationCov1, dist = "correlation", method = "ward", plot = TRUE) #Cluster samples based on correlation coefficients
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-PCA-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1) #Run a PCA analysis on percent methylation for all samples
dev.off() #Turn off plotting device
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Methylation-Screeplot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
PCASamples(methylationInformationCov1, screeplot = TRUE) #Run the PCA analysis and plot variances against PC number in a screeplot
dev.off()
jpeg(filename = "2018-10-18-Genefish-Samples/2018-10-18-Full-Sample-Pearson-Correlation-Plot-Cov1.jpeg", height = 1000, width = 1000) #Save file with designated name
getCorrelation(methylationInformationCov1, plot = TRUE) #Understand correlation between methylation patterns in different samples
dev.off()
